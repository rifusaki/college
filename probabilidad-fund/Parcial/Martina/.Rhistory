theme_light()
xtable(p7_ta)
xtable(p9_ta)
xtable(p8_ta)
xtable(p10_ta)
## Mejor gráfica?
ggplot(p4_alumnos, aes(x=carrera, y=freq, fill=forcats::fct_rev(factor(Estrato)))) +
scale_fill_manual(values=p2_colores) +
geom_col(position = position_stack()) +
xlab("Carreras") + ylab("Proporción de estratos") +
labs(title="Estrato por carrera", fill="Estrato", caption="Grupo 5") +
theme_light()
p10_ta
# Librerias
library(ggplot2) #Graficas
library(dplyr) #Ordenar datos
library(reshape2) #Ordenar datos
library(tidyverse) #Mas datos
library(RColorBrewer) #Colores personalizados
library(modeest) #Datos
library(EnvStats) #CV
library(scales) #Tortas
library(xtable) #Tablas en LaTeX
# R Commander
library(Rcmdr)
# Importar datos
EAlumnos <-
readXL("G:/Mi unidad/III Semestre/Probabilidad y Estadística Fundamental/Parcial/Alumnos.xlsx",
rownames=FALSE, header=TRUE, na="", sheet="alumnos%20simulados",
stringsAsFactors=TRUE)
alumnos <- data.frame(EAlumnos)
# Punto 2: Gráficas género, carrera y estrato
## Barras
p2_alumnos <- alumnos %>% count(carrera,genero,Estrato) %>% group_by(carrera,genero,Estrato) # SE ME
p2_colores = brewer.pal(n = 9, "YlGnBu")[3:9]
ggplot(p2_alumnos, aes(x=carrera, y=n, fill=forcats::fct_rev(factor(Estrato)))) +
facet_wrap(~ genero, scales = "free_x") +
scale_fill_manual(values=p2_colores) +
geom_col(position = position_stack()) +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por carrera, género y estrato", fill="Estrato", caption="Grupo 5") +
theme_light()
## Torta
### Género
p2_colores_2 = brewer.pal(n = 9, "YlGnBu")[4:9]
p2_g <- alumnos %>%
group_by(genero) %>%
summarise(n = n()) %>%
mutate(prop = n / sum(n) *100) %>%
mutate(ypos = 37*cumsum(prop)- 5*prop )
ggplot(p2_g, aes(x="", y=n, fill=forcats::fct_rev(factor(genero)))) +
geom_col(position = position_stack()) +
scale_fill_manual(values=p2_colores_2) +
xlab("") + ylab("") +
labs(title="Proporción de género", fill="Género", caption="Grupo 5") +
coord_polar("y", start=0) +
geom_text(aes(x=1.6,y = c(1250,3750), label = n), color = "black", size=4.5) +
theme_void()
### Estrato
p2_e <- alumnos %>%
group_by(Estrato) %>%
summarise(n = n()) %>%
mutate(prop = n / sum(n) *100) %>%
mutate(ypos = 46*cumsum(prop)- 12*prop )
ggplot(p2_e, aes(x="", y=n, fill=forcats::fct_rev(factor(Estrato)))) +
geom_col(position = position_stack()) +
scale_fill_manual(values=p2_colores) +
xlab("") + ylab("") +
labs(title="Proporción de estrato", fill="Estrato", caption="Grupo 5") +
coord_polar("y", start=0) +
geom_text(aes(x=1.6,y = ypos, label = n), color = "black", size=4.2) +
theme_void()
### Carrera
colourCount = length(unique(alumnos$carrera))
p2_colores_3 = colorRampPalette(brewer.pal(9, "Set1"))
p2_c <- alumnos %>%
group_by(carrera) %>%
summarise(n = n()) %>%
mutate(prop = n / sum(n) *100) %>%
mutate(ypos = 50*cumsum(prop)- 20*prop )
ggplot(p2_c, aes(x="", y=n, fill=forcats::fct_rev(factor(carrera)))) +
geom_col(position = position_stack()) +
scale_fill_manual(values=p2_colores_3(colourCount)) +
xlab("") + ylab("") +
labs(title="Proporción de carrera", fill="Carrera", caption="Grupo 5") +
coord_polar("y", start=0) +
geom_text(aes(x=1.6,y = ypos, label = n), color = "black", size=4.2) +
theme_void()
# Punto 3: Carrera y género
p3_al <- alumnos %>% count(carrera,genero) %>% group_by(carrera,genero)
p3_ta = cbind(p3_al)
p3_la <- as.matrix(p3_ta)
xtable(p3_ta)
# Punto 4: Freq rel carrera y estrato
p4_alumnos <- alumnos %>% group_by(carrera, Estrato) %>% summarise(n = n()) %>%  mutate(freq=n/sum(n))
p4_al <- alumnos %>% group_by(carrera, Estrato) %>% summarise(n = n()) %>%  mutate(freq=n/sum(n)) %>%
select(carrera,Estrato,freq) %>% pivot_wider(names_from = Estrato, values_from = freq)
p4_ta = cbind(p4_al)
xtable(p4_ta)
## Mejor gráfica?
ggplot(p4_alumnos, aes(x=carrera, y=freq, fill=forcats::fct_rev(factor(Estrato)))) +
scale_fill_manual(values=p2_colores) +
geom_col(position = position_stack()) +
xlab("Carreras") + ylab("Proporción de estratos") +
labs(title="Estrato por carrera", fill="Estrato", caption="Grupo 5") +
theme_light()
# Punto 5: Gráficos edad
## Barras
p5_alumnos <- alumnos %>% group_by(carrera,edad) %>% count(carrera)
p5_colores = brewer.pal(n = 9, "YlGnBu")[1:9]
ggplot(p5_alumnos, aes(x=edad, y=n, fill=forcats::fct_rev(factor(edad)))) +
scale_fill_manual(values=p5_colores) +
geom_col(position = position_stack()) +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
ggplot(p5_alumnos, aes(x=edad, y=n)) +
scale_fill_manual(values=p5_colores) +
geom_col(position = position_stack()) +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
ggplot(p5_alumnos, aes(x=edad, y=n)) +
color_fill_manual(values=p5_colores) +
geom_col(position = position_stack()) +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
ggplot(p5_alumnos, aes(x=edad, y=n)) +
color_fill_manual(values=p5_colores) +
geom_col(position = position_stack(), color="#22ADE6") +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
ggplot(p5_alumnos, aes(x=edad, y=n)) +
#color_fill_manual(values=p5_colores) +
geom_col(position = position_stack(), color="#22ADE6") +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
ggplot(p5_alumnos, aes(x=edad, y=n)) +
#color_fill_manual(values=p5_colores) +
geom_col(position = position_stack(), color="#22ADE6", fill="#22ADE6") +
xlab("Carreras") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
ggplot(p5_alumnos, aes(x=edad, y=n)) +
geom_col(position = position_stack(), color="#22ADE6", fill="#22ADE6") +
xlab("Edades") + ylab("Cantidad de estudiantes") +
labs(title="Cantidad de estudiantes por Edad", fill="Edad", caption="Grupo 5") +
theme_light()
# Punto 8: Medidas de variabilidad
rango <- function(a) {
res <- range(a)[2]-range(a)[1]
return(res)
}
p8_ra <- alumnos %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(rango))
p8_var <- alumnos %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(var))
p8_sd <- alumnos %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(sd))
p8_cv <- alumnos %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(cv))
p8_sum <- data.frame(Variables = c("promedio", "edad", "peso", "altura"),
Rango = as.vector(t(p8_ra)), Desviación = as.vector(t(p8_sd)), Varianza = as.vector(t(p8_var)),
CVariacion = as.vector(t(p8_cv)))
p8_ta = cbind(p8_sum)
xtable(p8_ta)
# Punto 10-11: Asimetría y apuntamiento
p10_asi_m <- alumnos %>% filter(genero="M") %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(skewness))
# Punto 10-11: Asimetría y apuntamiento
p10_asi_m <- alumnos %>% filter(genero=="M") %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(skewness))
p10_sum <- data.frame(Variables = c("promedio", "edad", "peso", "altura"),
"Asimetria (M)" = as.vector(t(p10_asi_m)),
"Asimetria (F)" = as.vector(t(p10_asi_f)),
"Apuntamiento (M)" = as.vector(t(p10_apu_m)),
"Apuntamiento (F)" = as.vector(t(p10_apu_f)))
# Punto 10-11: Asimetría y apuntamiento
p10_asi_m <- alumnos %>% filter(genero=="M") %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(skewness))
p10_asi_f <- alumnos %>% filter(genero=="F") %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(skewness))
p10_apu_m <- alumnos %>% filter(genero=="M") %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(kurtosis))
p10_apu_f <- alumnos %>% filter(genero=="F") %>% select(promedio, edad, peso, altura) %>% summarise_all(funs(kurtosis))
p10_sum <- data.frame(Variables = c("promedio", "edad", "peso", "altura"),
"Asimetria (M)" = as.vector(t(p10_asi_m)),
"Asimetria (F)" = as.vector(t(p10_asi_f)),
"Apuntamiento (M)" = as.vector(t(p10_apu_m)),
"Apuntamiento (F)" = as.vector(t(p10_apu_f)))
p10_ta = cbind(p10_sum)
xtable(p10_ta)
quantile(Alumnos$promedio)# cuartiles
quantile(Alumnos$peso,c(0.25,0.75,0.85,0.92))# percentiles
quantile(Alumnos$altura,c(0.25,0.75,0.85,0.92))# percentiles
res *= i
res = res*i
for (i in 1:x) {
res = res*i
}
res = 0
n_factorial <- function(x) {
res = 0
for (i in 1:x) {
res = res*i
}
return(res)
}
res *= i
n_factorial(30)
n_factorial(30)
res = 1
n_factorial(30)
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial(30)
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 0
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial(30)
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial = function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res <- 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
rango <- function(a) {
res <- range(a)[2]-range(a)[1]
return(res)
}
for (i in 1:30) {
i
}
for (i in 1:30) {
print(i)
}
rango <- function(a) {
re <- 1
for (i in 1:a) {
print(i)
}
}
rango <- function(a) {
re <- 1
for (i in 1:a) {
print(i)
}
return(re)
}
rango <- function(a) {
re <- 1
for (i in 1:a) {
re *= i
print(i)
}
return(re)
}
rango <- function(a) {
re <- 1
for (i in 1:a) {
re <- re*i
print(i)
}
return(re)
}
n_factorial <- function(x) {
res <- 1
for (i in 1:a) {
re <- re*i
}
return(re)
}
n_factorial(30)
n_factorial <- function(x) {
res <- 1
for (i in 1:a) {
res <- res*i
}
return(res)
}
n_factorial(30)
n_factorial <- function(x) {
res <- 1
for (i in 1:x) {
res <- res*i
}
return(res)
}
n_factorial(30)
n_factorial(5)
n_factorial <- function(x) {
res <- 1
for (i in 1:x) {
res = res*i
}
return(res)
}
n_factorial(5)
n_factorial <- function(x) {
res <- 1
for (i in 1:x) {
res *= i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res *= res*i
}
return(res)
}
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res = res*i
}
return(res)
}
n_factorial(5)
perm <- function(n,k) {
return((n_factorial(n))/(n_factorial(n-k)))
}
perm(10,3)
pem(10,3)
perm(10,3)
n_factorial <- function(x) {
res = 1
for (i in 1:x) {
res = res*i
}
return(res)
}
n_factorial(0)
n_factorial <- function(x) {
res = 1
if(x != 0){
for (i in 1:x) {
res = res*i
}
}
return(res)
}
n_factorial(0)
n_factorial(1)
n_factorial(2)
?pt
qt(c(0.01),df=21,lower.tail = F)
?qt
p
qt(c(0.01),df=21,lower.tail = F)
s_mu <- sd() # Desv estándar para t
n <- length()
s_mu <- sd() # Desv estándar para t
n <- length()
xbarra <- mean()
t_crit <- round(qt(c(),0,1,F),3);t_crit
length(ruptura)
length(m1)
# 1 - Saturación de gas residual
m1 <- c(23.5, 31.5, 34.0, 46.7, 45.6, 32.5, 41.4, 37.2, 42.5,
46.9, 51.5, 36.4, 44.5, 35.7, 33.5, 39.3, 22.0, 51.2)
length(m1)
qqnorm(m1, main="QQ plot de una normal")
qqline(m1)  # Para agregar la linea de referencia
s_mu <- sd(m1) # Desv estándar para t
n <- length(m1)
xbarra <- mean(ruptura)
xbarra <- mean(m1)
prom <- mean(m1)
t_crit <- round(qt(c(0.025),df = n-1,lower.tail = F),3);t_crit
LI_mu <- round(xbarra - t_crit*s_mu/sqrt(n),3);LI_mu
LS_mu <- round(xbarra + t_crit*s_mu/sqrt(n),3);LS_mu
paste("El intervalo de confianza para mu del 95% es:",LI_mu,LS_mu)
qqnorm(m1, main="QQ plot de una normal")
qqnorm(m1, main="QQ plot de una normal")
qqline(ruptura)  # Para agregar la linea de referencia
qqline(ruptura)  # Para agregar la linea de referencia
qqline(m1)  # Para agregar la linea de referencia
t.test(x = m1, y = NULL,alternative = "two.sided", conf.level = 0.95)
201.9
# 6 -
m6 <- c(167.9, 180.8, 184.8, 189.8, 194.8, 200.2, 201.9, 206.9,
207.2, 208.4, 226.3, 227.7, 228.5, 232.4, 239.8, 258.6)
qqline(m1)  # Para agregar la linea de referencia
## Grafico de normalidad
qqnorm(m6, main="QQ plot de una normal")
qqline(m6)  # Para agregar la linea de referencia
t.test(x = m1, y = NULL,alternative = "two.sided", conf.level = 0.99)
lenght(m6)
length(m6)
length(m1)
length(millas)
millas <- c(2948, 2996, 7197, 8338, 8500, 8759, 12710, 12925,
15767, 20000, 23247, 24863, 26000, 26210, 30552,
30600,35700, 36466, 40316, 40596, 41021, 41234,
43000, 44607,45000, 45027, 45442, 46963, 47978,
49518, 52000, 53334,54208, 56062, 57000, 57365,
60020, 60265, 60803, 62851,64404, 72140, 74594,
79308, 79500, 80000, 80000, 84000, 113000,118634)
length(millas)
sigma_mu <- sd(millas) #muestra grande (S)
## Cálculo de intervalo
t_crit <- round(qt(c(0.025),df = n-1,lower.tail = F),3);t_crit
## Método utilizado en realidad
t.test(x = m1, y = NULL,alternative = "two.sided", conf.level = 0.95)
prom
## Cálculos base
s_mu <- sd(m1) # Desv estándar
s_mu
?qt
t_crit
## Método utilizado en realidad
t.test(x = m1, y = NULL,alternative = "two.sided", conf.level = 0.95)
lenght(m6)
length(m6)
# 6 -
m6 <- c(167.9, 180.8, 184.8, 189.8, 194.8, 200.2, 201.9, 206.9,
207.2, 208.4, 226.3, 227.7, 228.5, 232.4, 239.8, 258.6)
t.test(x = m1, y = NULL,alternative = "two.sided", conf.level = 0.99)
## Grafico de normalidad
qqnorm(m6, main="QQ plot de una normal")
qqline(m6)  # Para agregar la linea de referencia
t.test(x = m6, y = NULL,alternative = "two.sided", conf.level = 0.99)
sd(m6)
## Cálculo de intervalo
t_crit <- round(qt(c(0.025),df = n-1,lower.tail = F),3)
t_crit
## Método utilizado en realidad
t.test(x = m1, y = NULL,alternative = "two.sided", conf.level = 0.95)
s_mu <- sd(m6) # Desv estándar
n <- length(m6) # Cantidad de datos
prom <- mean(m6) # Promedio
## Cálculo de intervalo
t_crit <- round(qt(c(0.025),df = n-1,lower.tail = F),3)
t_crit
qqnorm(m6, main="QQ plot de una normal")
qqline(m6)
t.test(x = m6, y = NULL,alternative = "two.sided", conf.level = 0.99)
x=1262
n=2253
prop.test(x=1262, n=2253, conf.level=0.95)$conf.int
# 2 - Medios inalámbricos
x = 1262; n = 2253
prop.test(x=1262, n=2253, conf.level=0.95)$conf.int
# 7 - Secado de pintura
B = c(2.8,3.3,5.6,3.7,2.8,4.4,4.0,5.2,3.0,4.8,3.4,2.5,4.8,
2.9,3.6)
# 7 - Secado de pintura
B = c(2.8,3.3,5.6,3.7,2.8,4.4,4.0,5.2,3.0,4.8,3.4,2.5,4.8,2.9,3.6)
boxplot(B,horizontal = T)
t.test(x =B,conf.level = 0.95)$conf.int
